/**
 * 
 */
package com.fb.ifs.core.domain;

import java.lang.reflect.Type;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.TreeMap;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.fb.commons.ifs.IFSResultTO;
import com.fb.commons.ifs.SingleArticleServiceabilityRequestTO;
import com.fb.commons.ifs.SingleArticleServiceabilityResponseTO;
import com.fb.ifs.core.dao.IFSDao;
import com.fb.ifs.core.dao.IFSToBoMapper;
import com.fb.util.Jsonizable;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;



/**
 * @author sarvesh
 *
 */
public class IFSManagerImpl implements IFSManager {
	
	ResourceBundle ifsResBndl = ResourceBundle.getBundle("ifsResources");
	
	private static Logger log = Logger.getLogger(IFSManagerImpl.class);
	
	public IFSDao ifsDao;
	
	public enum ResponseCode {SUCCESS,FAILURE,ERR_PRODGRP,ERR_CVG_AREA,ERR_LSP_COD,ERR_LSP_HV,ERR_INV,ERR_INV_COD_LOCAL,ERR_INV_COD,ERR_INV_LOCAL,ERR_LOCAL,ERR_DELV}
	
	static final String PRDGRP_NOT_FOUND = "SKUPrdGrpNotFound";
	
	static final String LSP_NOT_FOUND = "SKULspNotFound";
	
	static final String OUT_OF_STOCK = "SKUOutOfStock";
	
	static final String PARTIAL_STOCK_AVAILABLE = "SKUPartialStockAvailable";
	
	static final String SKU_AVAILABLE = "SKUAvailable";
	
	public SingleArticleServiceabilityResponseTO getSingleArticleServiceabilityInfo(SingleArticleServiceabilityRequestTO serviceabilityRequestTO) {

		IFSToBoMapper ifsToBoMapper = new IFSToBoMapper();
		
		SingleArticleServiceabilityRequestBo serviceabilityRequestBo = ifsToBoMapper.updateBo(serviceabilityRequestTO);
		IFSResultTO ifsResultTO = new IFSResultTO(); 
		SingleArticleServiceabilityResponseTO art = new SingleArticleServiceabilityResponseTO();
		List<Jsonizable> ljs = new ArrayList<Jsonizable>();
		ifsResultTO.setArticleId(serviceabilityRequestBo.getArticleId());
		
		// XXX: We should cache the product group of an article, and give an api
		// XXX: to invalidate it as well.
		ProductBo productBo = ifsDao.getProductGroup(serviceabilityRequestBo.getArticleId(), serviceabilityRequestBo.getClient());
		String message = "";
		
		if(productBo == null)
		{
			message = getFulfillmentMSG(PRDGRP_NOT_FOUND);	
			log.error(message+" for article :: "+serviceabilityRequestTO.getArticleId());
			ljs.add(ifsResultTO);
			art.setObjects(ljs);
			art.setStatusCode(ResponseCode.ERR_PRODGRP.toString());
			art.setStatusMessage(message);
			return art;
		}
		ifsResultTO.setProductGroup(productBo.getProductGroup());
		ifsResultTO.setShipLocalOnly(productBo.isShipLocalOnly());
		ifsResultTO.setHighValue(productBo.isHighValueFlag());
		ifsResultTO.setModOfTransport(productBo.getShippingMode());
		
		List<LSPBo> lspBoList = ifsDao.getLSPList(productBo, serviceabilityRequestBo);
		if(lspBoList == null || lspBoList.size() == 0)
		{
			message = getFulfillmentMSG(LSP_NOT_FOUND, serviceabilityRequestBo.getPincode());
			log.error(message+" for article : "+serviceabilityRequestTO.getArticleId());
			ljs.add(ifsResultTO);
			art.setObjects(ljs);
			art.setStatusCode(ResponseCode.ERR_INV.toString());
			art.setStatusMessage(message);
			return art;
		}
		
		if(serviceabilityRequestBo.isCod())
		{
			filterLSPForCOD(lspBoList);
			log.info("lspBoList after cod filter :: " + lspBoList);
			if(lspBoList == null || lspBoList.size() == 0)
			{
				message = getFulfillmentMSG(LSP_NOT_FOUND, serviceabilityRequestBo.getPincode());
				log.error(message+" for article : "+serviceabilityRequestTO.getArticleId());
				ljs.add(ifsResultTO);
				art.setObjects(ljs);
				art.setStatusCode(ResponseCode.ERR_LSP_COD.toString());
				art.setStatusMessage(message);
				return art;
			}
		}
		
		if(productBo.isHighValueFlag())
		{
			filterLSPForHighValue(lspBoList);
			log.info("lspBoList after high value filter :: " + lspBoList);
			if(lspBoList == null || lspBoList.size() == 0)
			{
				message = getFulfillmentMSG(LSP_NOT_FOUND, serviceabilityRequestBo.getPincode());
				log.error(message+" for article : "+serviceabilityRequestTO.getArticleId());
				ljs.add(ifsResultTO);
				art.setObjects(ljs);
				art.setStatusCode(ResponseCode.ERR_LSP_HV.toString());
				art.setStatusMessage(message);
				return art;
			}
		}
		
		List<DCBo> dcBoList = ifsDao.getDcList(productBo, serviceabilityRequestBo);
		
		if(dcBoList == null || dcBoList.size() == 0)
		{
			log.info("no dc found...........");
			message = getFulfillmentMSG(OUT_OF_STOCK);
			ljs.add(ifsResultTO);
			art.setObjects(ljs);
			art.setStatusCode(ResponseCode.ERR_INV.toString());
			art.setStatusMessage(message);
			return art;
		}
		
		TreeMap<String, Integer> dcStockMap = new TreeMap<String, Integer>();
		Map<String, Integer> dcDeltaTimeMap = new TreeMap<String, Integer>();
		Map<String, Integer> dcBackorderableTimeMap = new TreeMap<String, Integer>();
		
		populateDCStockDeltaTimeMap(dcBoList, dcStockMap, dcDeltaTimeMap, dcBackorderableTimeMap);
		
		sortDCStockMapByStock(dcStockMap);
		String dcWithMaxStock = dcStockMap.firstEntry().getKey();
		int maxQtyInSingleDC = dcStockMap.firstEntry().getValue();
		
		boolean isBackOrderable = false;
		if(dcBackorderableTimeMap != null && dcBackorderableTimeMap.size() > 0)
		{
			isBackOrderable = true;
			ifsResultTO.setBackorderable(Boolean.TRUE);
		}
		
		boolean isAllQuantityFulfilledWithoutFilter = (maxQtyInSingleDC >= serviceabilityRequestBo.getQty());
		if(!isAllQuantityFulfilledWithoutFilter && !isBackOrderable)
		{
			message = getFulfillmentMSG(PARTIAL_STOCK_AVAILABLE, maxQtyInSingleDC);
			log.error(message+" for article : "+serviceabilityRequestTO.getArticleId());
			ljs.add(ifsResultTO);
			art.setObjects(ljs);
			art.setStatusCode(ResponseCode.ERR_INV.toString());
			art.setStatusMessage(message);	
			return art;
		}
		
		
		boolean isAllQuantityFulfilledWithFilter = true;
		
		if(serviceabilityRequestBo.isCod() || productBo.isShipLocalOnly())
		{
			filterDCsForCODandLocal(dcBoList, serviceabilityRequestBo, productBo);
			if(dcBoList == null || dcBoList.size() == 0)
			{
				log.info("dcBoList after COD and Local filter :: " + dcBoList);
				
				message = getFulfillmentMSG(OUT_OF_STOCK);
				ljs.add(ifsResultTO);
				art.setObjects(ljs);
				if(serviceabilityRequestBo.isCod() && productBo.isShipLocalOnly())
				{
					art.setStatusCode(ResponseCode.ERR_INV_COD_LOCAL.toString());
				}
				else if(serviceabilityRequestBo.isCod() && !productBo.isShipLocalOnly())
				{
					art.setStatusCode(ResponseCode.ERR_INV_COD.toString());
				}
				else if(!serviceabilityRequestBo.isCod() && productBo.isShipLocalOnly())
				{
					art.setStatusCode(ResponseCode.ERR_INV_LOCAL.toString());
				}
				else {
					art.setStatusCode(ResponseCode.ERR_INV.toString());
				}
				art.setStatusMessage(message);
				return art;
			}
			
			dcStockMap = new TreeMap<String, Integer>();
			dcDeltaTimeMap = new TreeMap<String, Integer>();
			dcBackorderableTimeMap = new TreeMap<String, Integer>();
			
			populateDCStockDeltaTimeMap(dcBoList, dcStockMap, dcDeltaTimeMap, dcBackorderableTimeMap);
			dcWithMaxStock = dcBoList.get(0).getDcId();
			maxQtyInSingleDC = dcBoList.get(0).getStockLevel();
			
			isBackOrderable = false;
			if(dcBackorderableTimeMap != null && dcBackorderableTimeMap.size() > 0)
			{
				isBackOrderable = true;
				ifsResultTO.setBackorderable(Boolean.TRUE);
			}
			isAllQuantityFulfilledWithFilter = (maxQtyInSingleDC >= serviceabilityRequestBo.getQty());
			if(!isAllQuantityFulfilledWithFilter && !isBackOrderable)
			{
				message = getFulfillmentMSG(PARTIAL_STOCK_AVAILABLE, maxQtyInSingleDC);
				log.error(message+" for article : "+serviceabilityRequestTO.getArticleId());
				ljs.add(ifsResultTO);
				art.setObjects(ljs);
				art.setStatusCode(ResponseCode.ERR_INV.toString());
				art.setStatusMessage(message);	
				return art;
			}
		}
		
		long totalQtyFound = getTotalQtyFound(dcBoList);
		ifsResultTO.setTotalQuantityFound(totalQtyFound);
		
		log.info("dcWithMaxStock :: " + dcBoList.get(0));

		String dcStockString = getDCStockString(dcStockMap);
		String dcPHStockString = getDCPHStockString(dcBoList);
		ifsResultTO.setDcStockString(dcStockString);
		ifsResultTO.setDcPhysicalStockString(dcPHStockString);
		log.info("dcStockMap :: "+dcStockMap);
		log.info("dcDeltaTimeMap :: "+dcDeltaTimeMap);
		
		List<LspDcBo> lspDcBoList = ifsDao.getLSPDCList(dcBoList, lspBoList, productBo, serviceabilityRequestBo);
		
		if(lspDcBoList == null || lspDcBoList.size() == 0)
		{
			message = getFulfillmentMSG(OUT_OF_STOCK);
			log.error(message+" for article : "+serviceabilityRequestTO.getArticleId());
			ljs.add(ifsResultTO);
			art.setObjects(ljs);
			if(productBo.isShipLocalOnly())
			{
				art.setStatusCode(ResponseCode.ERR_LOCAL.toString());
			}
			else {
				art.setStatusCode(ResponseCode.ERR_DELV.toString());
			}
			art.setStatusMessage(message);
			return art;
		}
		
		setLSPZGInfo(lspDcBoList, lspBoList);

		addDeltaToDeliveryTime(lspDcBoList, dcDeltaTimeMap);
		log.info("dcStockMap :: "+dcStockMap);
		log.info("dcDeltaTimeMap :: "+dcDeltaTimeMap);
		
		log.info("lspDcBoList after setting delta del time :: "+lspDcBoList);
		
		String dcSequenceString = getDCSequence(lspDcBoList, dcStockMap, dcDeltaTimeMap, dcBackorderableTimeMap, serviceabilityRequestBo.getQty());
		ifsResultTO.setDcSequenceString(dcSequenceString);
		
		LspDcBo primaryDCLSP = getPrimaryDCLSP(lspDcBoList, dcStockMap, serviceabilityRequestBo.getQty(), dcWithMaxStock);
		int deltaTime = 0;
		if(dcDeltaTimeMap != null && dcDeltaTimeMap.size() > 0 && dcDeltaTimeMap.containsKey(primaryDCLSP.getDcCode()))
		{
			deltaTime =	dcDeltaTimeMap.get(primaryDCLSP.getDcCode());
		}
		
		log.info("primaryDCLSP :: " + primaryDCLSP);
		ifsResultTO.setAllQuantityFulfilled(primaryDCLSP.getStockLevel() >= serviceabilityRequestBo.getQty());
		
		int backorderableTime = 0;
		if(dcBackorderableTimeMap != null && dcBackorderableTimeMap.size() > 0 && dcBackorderableTimeMap.get(primaryDCLSP.getDcCode()) != null)
		{
			backorderableTime =	dcBackorderableTimeMap.get(primaryDCLSP.getDcCode());
		}
		int deliveryTimeForPI = primaryDCLSP.getDeliveryTime();
		int deliveryTimeForVI = primaryDCLSP.getDeliveryTime() + deltaTime;
		int deliveryTimeForBI = primaryDCLSP.getDeliveryTime() + backorderableTime;
		int totalDeliveryTime = primaryDCLSP.getDeliveryTime() + deltaTime;
		
		ifsResultTO.setPrimaryDCLSP(primaryDCLSP.getDcCode()+"_"+primaryDCLSP.getLspCode()+"_"+deliveryTimeForPI+"_"+deliveryTimeForVI+"_"+deliveryTimeForBI);
		ifsResultTO.setDeliveryTime(primaryDCLSP.getDeliveryTime());
		ifsResultTO.setInventoryTime(deltaTime);
		ifsResultTO.setTotalDeliveryTime(totalDeliveryTime);
		
		Gson gson = new Gson();
		Type type = new TypeToken<Map<String, String>>(){}.getType();
		Map<String, String> zipGroupListDCMap = gson.fromJson(ifsResBndl.getString("zipGroupListDCMap"), type);
		ifsResultTO.setDefaultDC("");
		if(zipGroupListDCMap != null && zipGroupListDCMap.size() > 0)
		{
			Iterator<Entry<String, String>> it = zipGroupListDCMap.entrySet().iterator();
			while (it.hasNext()) {
		        Map.Entry<String, String> pairs = (Map.Entry<String, String>)it.next();
		        String zipGroupList = pairs.getKey();
		        if(!StringUtils.isEmpty(zipGroupList) && zipGroupList.length() > 0 && zipGroupList.indexOf(primaryDCLSP.getZipGroupCode()) != -1)
		        {
		        	ifsResultTO.setDefaultDC(pairs.getValue());
		        	break;
		        }
			}
		}
		message = getFulfillmentMSG(SKU_AVAILABLE, totalDeliveryTime);
		log.info(message+" for article : "+serviceabilityRequestTO.getArticleId());
		art.setStatusCode(ResponseCode.SUCCESS.toString());
		art.setStatusMessage(message);
		ifsResultTO.setFlfMessages(message);
		ljs.add(ifsResultTO);
		art.setObjects(ljs);
		return art;
	}
	
	private void sortDCStockMapByStock(Map<String, Integer> dcStockMap) {
		ArrayList as = new ArrayList( dcStockMap.entrySet() );  
        
        Collections.sort( as , new Comparator() {  
            public int compare( Object o1 , Object o2 )  
            {  
                Map.Entry e1 = (Map.Entry)o1 ;  
                Map.Entry e2 = (Map.Entry)o2 ;  
                Integer first = (Integer)e1.getValue();  
                Integer second = (Integer)e2.getValue();  
                return second.compareTo( first );  
            }  
        });  		
	}

	private void filterLSPForCOD(List<LSPBo> lspBoList) {
		for (int i = 0; i < lspBoList.size(); i++) {
			LSPBo lspBo = (LSPBo) lspBoList.get(i);
			if(!lspBo.isCod())
			{
				lspBoList.remove(lspBo);
			}
		}
	}
	
	private void filterLSPForHighValue(List<LSPBo> lspBoList) {
		for (int i = 0; i < lspBoList.size(); i++) {
			LSPBo lspBo = (LSPBo) lspBoList.get(i);
			if(!lspBo.isHighValue())
			{
				lspBoList.remove(lspBo);
			}
		}
	}

	private void filterDCsForCODandLocal(List<DCBo> dcBoList,
			SingleArticleServiceabilityRequestBo ifsBo, ProductBo productBo) {
		boolean isCod = ifsBo.isCod();
		boolean isShipLocalOnly = productBo.isShipLocalOnly();
		if(!isCod && !isShipLocalOnly){
			return;
		}
		else if(isCod && !isShipLocalOnly){
			for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
				DCBo dcBo = (DCBo) iterator.next();
				if(!dcBo.isCod())
				{
					dcBoList.remove(dcBo);
				}
				
			}
		}
		else if(!isCod && isShipLocalOnly){
			for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
				DCBo dcBo = (DCBo) iterator.next();
				if(!dcBo.isLocalDC())
				{
					dcBoList.remove(dcBo);
				}
				
			}
		}
		else if(isCod && isShipLocalOnly){
			for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
				DCBo dcBo = (DCBo) iterator.next();
				if(!dcBo.isLocalDC() || !dcBo.isCod())
				{
					dcBoList.remove(dcBo);
				}
			}
		}
	}

	private void setLSPZGInfo(List<LspDcBo> lspDcBoList, List<LSPBo> lspBoList) {
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			if(lspDcBo == null)
			{
				continue;
			}
			String zipgroupId = lspDcBo.getZipGroupId();
			String lspId = lspDcBo.getLspId();
			if(StringUtils.isEmpty(zipgroupId) || StringUtils.isEmpty(lspId))
			{
				continue;
			}
			for (Iterator<LSPBo> iterator2 = lspBoList.iterator(); iterator2.hasNext(); ) {
				LSPBo lspBo = (LSPBo) iterator2.next();
				if(lspBo == null)
				{
					continue;
				}
				if(zipgroupId.equalsIgnoreCase(lspBo.getZipGroupId()) && lspId.equalsIgnoreCase(lspBo.getLspId()))
				{
					lspDcBo.setLspPriority(lspBo.getLspPriority());
					lspDcBo.setZipGroupCode(lspBo.getZipGroupCode());
					lspDcBo.setLspCode(lspBo.getLspCode());
				}
			}
		}
	}

	private String getFulfillmentMSG(String messageCode, Object... params)
	{
		String message = "";
		try {
			message = ifsResBndl.getString(messageCode);
			if (params != null) {
				message = MessageFormat.format(message, params);
			}
		} 
		catch (Exception e) {
			 e.printStackTrace();
			 log.error(e.getMessage());
		}
		log.info("\n\n\n flf message :::::::::::: "+message);
		return message;
	}
	
	private String getDCPHStockString(List<DCBo> dcBoList) {
		String dcPHStockStr = "";
		for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
			DCBo dcBo = (DCBo) iterator.next();
			String invType = dcBo.getType();
			if(!StringUtils.isEmpty(invType) && invType.equalsIgnoreCase("physical"))
			{
				dcBo.setPhysicalStock(dcBo.getStockLevel());
				dcPHStockStr += dcBo.getDcId()+"_"+dcBo.getStockLevel()+",";
			}
		}
		
		if(StringUtils.isEmpty(dcPHStockStr)){
			return dcPHStockStr;
		}
		dcPHStockStr = dcPHStockStr.substring(0, dcPHStockStr.lastIndexOf(","));
		
		return dcPHStockStr;
	}

	private String getDCStockString(Map<String, Integer> dcStockMap) {
		String dcStockStr = "";
		if(dcStockMap == null || dcStockMap.size() == 0)
		{
			return dcStockStr;
		}
		Iterator<Entry<String, Integer>> it = dcStockMap.entrySet().iterator();
		while (it.hasNext()) {
	        Map.Entry<String, Integer> pairs = (Map.Entry<String, Integer>)it.next();
	        log.info(pairs.getKey() + " = " + pairs.getValue());
	        dcStockStr += pairs.getKey()+"_"+pairs.getValue()+",";
	    }
		if(StringUtils.isEmpty(dcStockStr)){
			return dcStockStr;
		}
		dcStockStr = dcStockStr.substring(0, dcStockStr.lastIndexOf(","));
		
		return dcStockStr;
	}


	private void addDeltaToDeliveryTime(List<LspDcBo> lspDcBoList, Map<String, Integer> dcDeltaTimeMap) {
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			int inventoryTime = 0;
			// XXX: Should follow java's coding conventions. { should start on same line as if etc.
			// XXX: Use Check style plugin from Vinayak
			if(dcDeltaTimeMap != null && dcDeltaTimeMap.size() > 0 && dcDeltaTimeMap.containsKey(lspDcBo.getDcCode()))
			{
				inventoryTime = dcDeltaTimeMap.get(lspDcBo.getDcCode());
			}
			lspDcBo.setInventoryTime(inventoryTime);
			lspDcBo.setTotalDeliveryTime(lspDcBo.getDeliveryTime() + inventoryTime);
		}
		Collections.sort(lspDcBoList);
	}

	private long getTotalQtyFound(List<DCBo> dcBoList) {
		long totalQtyFound = 0;
		for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
			DCBo dcBo = (DCBo) iterator.next();
			totalQtyFound += dcBo.getStockLevel();
		}
		return totalQtyFound;
	}

	private void populateDCStockDeltaTimeMap(List<DCBo> dcBoList, Map<String, Integer> dcStockMap,
			Map<String, Integer> dcDeltaTimeMap, Map<String, Integer> dcBackorderableTimeMap) {
		
		for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
			DCBo dcBo = (DCBo) iterator.next();
			int stockLevel = dcBo.getStockLevel();
			if(dcStockMap != null && dcStockMap.get(dcBo.getDcId()) != null )
			{
				stockLevel += dcStockMap.get(dcBo.getDcId());
			}
			dcStockMap.put(dcBo.getDcId(), stockLevel);
			if(!StringUtils.isEmpty(dcBo.getType()) && dcBo.getType().equalsIgnoreCase("virtual"))
			{
				dcDeltaTimeMap.put(dcBo.getDcId(), dcBo.getDeltaDeliveryTime());
			}
			boolean isBackorderable = dcBo.isBackOrderable();
			if (isBackorderable) {
				dcBackorderableTimeMap.put(dcBo.getDcId(), dcBo.getExpectedInDays());
			}
		}
		Collections.sort(dcBoList);
	}

	private LspDcBo getPrimaryDCLSP(List<LspDcBo> lspDcBoList, Map<String, Integer> dcStockMap, int qty, String dcWithMaxStock) {
		log.info("\n\nIFSManagerImpl.getPrimaryDCLSP()");
		LspDcBo primaryDCLSP = null;
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			
			Integer stock = 0;
			if(dcStockMap != null && dcStockMap.get(lspDcBo.getDcCode()) != null )
			{
				stock = (Integer) dcStockMap.get(lspDcBo.getDcCode());
			}
			if (stock > qty) {
				primaryDCLSP = lspDcBo;
				break;
			}
			if(!StringUtils.isEmpty(dcWithMaxStock) && primaryDCLSP == null && dcWithMaxStock.equals(lspDcBo.getDcCode()))
			{
				primaryDCLSP = lspDcBo;
			}
		}
		if(primaryDCLSP != null && dcStockMap.containsKey(primaryDCLSP.getDcCode()))
		{
			primaryDCLSP.setStockLevel(dcStockMap.get(primaryDCLSP.getDcCode()));
		}
		return primaryDCLSP;
	}

	private String getDCSequence(List<LspDcBo> lspDcBoList, Map<String, Integer> dcStockMap, Map<String, Integer> dcDeltaTimeMap, Map<String, Integer> dcBackorderableTimeMap, int qty) {
		String dcSequenceString = "";
		
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			int deltaTime = 0;
			int backorderableTime = 0;
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			if(dcDeltaTimeMap != null && dcDeltaTimeMap.size() > 0 && dcDeltaTimeMap.containsKey(lspDcBo.getDcCode()))
			{
				deltaTime =	dcDeltaTimeMap.get(lspDcBo.getDcCode());
			}
			if(dcBackorderableTimeMap != null && dcBackorderableTimeMap.size() > 0 && dcBackorderableTimeMap.containsKey(lspDcBo.getDcCode()))
			{
				backorderableTime =	dcBackorderableTimeMap.get(lspDcBo.getDcCode());
			}
			int deliveryTimeForPI = lspDcBo.getDeliveryTime();
			int deliveryTimeForVI = lspDcBo.getDeliveryTime() + deltaTime;
			int deliveryTimeForBI = lspDcBo.getDeliveryTime() + backorderableTime;
			if((dcStockMap != null && dcStockMap.size() > 0 && (dcStockMap.get(lspDcBo.getDcCode()) >= qty)) || dcBackorderableTimeMap.get(lspDcBo.getDcCode()) != null)
			{
				dcSequenceString += lspDcBo.getDcCode()+"_"+lspDcBo.getLspCode()+"_"+deliveryTimeForPI+"_"+deliveryTimeForVI+"_"+deliveryTimeForBI+",";
			}
		}
		if(StringUtils.isEmpty(dcSequenceString)){
			return dcSequenceString;
		}
		dcSequenceString = dcSequenceString.substring(0, dcSequenceString.lastIndexOf(","));
		return dcSequenceString;
	}

	/**
	 * @param ifsDao the ifsDao to set
	 */
	public void setIfsDao(IFSDao ifsDao) {
		this.ifsDao = ifsDao;
	}

}
