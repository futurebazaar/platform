/**
 * 
 */
package com.fb.ifs.core.dao;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;

import com.fb.ifs.core.domain.DCBo;
import com.fb.ifs.core.domain.IFSBo;
import com.fb.ifs.core.domain.LspDcBo;
import com.fb.ifs.core.domain.ProductBo;

/**
 * @author sarvesh
 *
 */
public class IFSDaoJdbcImpl implements IFSDao {

	private static Logger s_logger = Logger.getLogger(IFSDaoJdbcImpl.class);
	
	private JdbcTemplate jdbcTemplate;

	private static final String GET_PRODUCTGROUP_QUERY = "SELECT a.name, a.local_tag, a.ship_mode, a.high_value_flag, a.threshold_amount, b.article_id" +
														 " FROM fulfillment_productgroup a, fulfillment_articleproductgroup b" + 
														 " where a.id = b.product_group_id and b.article_id = ? and a.client_id = ?";
	
	private static final String GET_DC_BASIC = "select b.id, b.code, a.type, case when (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) -" + 
											   " COALESCE(a.threshold, 0) - COALESCE(a.outward, 0))> 0 then (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - " +
											   " COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) else 0 end stock_level, (case when ((a.type = 'virtual')) then DATEDIFF(a.expected_on,curdate()) else 0 end) delta, c.backorderable, c.expected_in from inventory_inventory a " +
											   " join fulfillment_dc b on (a.dc_id = b.id) left join inventory_inventorybackorder c on  (a.rate_chart_id = c.rate_chart_id and a.dc_id = c.dc_id)" +
											   " where a.rate_chart_id = ? and b.client_id = ? and a.starts_on <= curdate() and curdate() <= a.ends_on and (case when ((a.type = 'virtual')) then a.expected_on >= curdate() else 1 end) and ((COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) > 0 or c.backorderable = 1)";

	
	public ProductBo getProductGroup(String productId, String client) {
		s_logger.info("productId :: "+productId+" <<>> client :: "+client);
		List<ProductBo> productBoList = (List<ProductBo>)jdbcTemplate.query(GET_PRODUCTGROUP_QUERY, new Object[]{productId, client}, new ProductMapper());
		s_logger.info("productBoList :: "+productBoList);
		if(productBoList == null || productBoList.size() == 0)
		{
			return null;
		}
		s_logger.info(productBoList);
		return productBoList.get(0);
	}
	
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public List<DCBo> getDcList(ProductBo productBo, IFSBo ifsBo) {
		String rateChartId = ifsBo.getRateChartId();
		String query = GET_DC_BASIC;
		Object[] params = new Object[2];
		
		params[0] = rateChartId;
		params[1] = ifsBo.getClient();
		s_logger.info("isCod :: "+ifsBo.isCod());
		if(ifsBo.isCod())
		{
			query += " and b.cod_flag = 1";
		}
		if(productBo.isShipLocalOnly())
		{
			query += " and b.id in (select dc_id from fulfillment_dczipgroup)";
		}
		query += "  order by stock_level desc";
		s_logger.info("dc query :: " + query);
		List<DCBo> dcBoList = jdbcTemplate.query(query, params, new DCMapper());
		return dcBoList;
	}

	private String getDCArray(List<DCBo> dcBoList) {
		String retStr = ""; 
		for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
			DCBo dcBo = (DCBo) iterator.next();
			retStr += dcBo.getId()+",";
		}
		if(!StringUtils.isEmpty(retStr))
		{
			retStr = retStr.substring(0,retStr.lastIndexOf(","));
		}
		return retStr;
	}

	@Override
	public List<LspDcBo> getLSPDCList(List<DCBo> dcBoList, ProductBo productBo, IFSBo ifsBo) {
		s_logger.info("IFSDaoJdbcImpl.getLSPDCList()");
		String query = "";
		String dcArray = getDCArray(dcBoList);
		s_logger.info("dcArray :: " + dcArray);
		List<LspDcBo> lspDcBoList = null;
		if(productBo.isShipLocalOnly())
		{
			query = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, b.zipgroup_code, d.code dc_code, e.code lsp_code from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_dczipgroup c, fulfillment_dc d, fulfillment_lsp e" +
			  " where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = "+ifsBo.getPincode()+" and" +
			  "	a.supported_product_groups like '%"+productBo.getProductGroup()+",%' and c.dc_id in ("+dcArray+")";
			  
			  if(ifsBo.isCod())
			  {
				  query += " and a.cod_flag = 1"; 
			  }
			  query += " order by a.lsp_priority asc";
		}
		else
		{
			query = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, d.code dc_code, e.code lsp_code, b.zipgroup_code, c.transit_time from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_lspdeliverychart c, fulfillment_dc d, fulfillment_lsp e" + 
			 " where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = "+ifsBo.getPincode()+" and a.supported_product_groups like '%"+productBo.getProductGroup()+",%'" +
			 " and c.dc_id in ("+dcArray+") and c.ship_mode = '"+productBo.getShippingMode()+"'";
			
			if(ifsBo.isCod())
			{
				query += " and a.cod_flag = 1"; 
			}
			query += " order by a.lsp_priority, c.transit_time asc;";
		}
		s_logger.info("query :: "+query);
		lspDcBoList = jdbcTemplate.query(query, new Object[]{}, new LspDcMapper());
		
		if(lspDcBoList == null || lspDcBoList.size() == 0)
		{
			s_logger.info("no entry found in delivery chart...");
			return null;
		}
		s_logger.info("rows found :: "+lspDcBoList.size());
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			s_logger.info("lsp :: "+lspDcBo.getLspId()+" -- dcId :: "+lspDcBo.getDcId());
		}
		return lspDcBoList;
	}

}
