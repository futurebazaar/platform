/**
 * 
 */
package com.fb.ifs.core.dao;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;

import com.fb.ifs.core.domain.DCBo;
import com.fb.ifs.core.domain.IFSBo;
import com.fb.ifs.core.domain.LspDcBo;
import com.fb.ifs.core.domain.ProductBo;

/**
 * @author sarvesh
 *
 */
public class IFSDaoJdbcImpl implements IFSDao {

	private static Logger s_logger = Logger.getLogger(IFSDaoJdbcImpl.class);
	
	private JdbcTemplate jdbcTemplate;

	private static final String GET_PRODUCTGROUP_QUERY = "SELECT a.name, a.local_tag, a.ship_mode, a.high_value_flag, a.threshold_amount, b.article_id" +
														 " FROM fulfillment_productgroup a, fulfillment_articleproductgroup b" + 
														 " where a.id = b.product_group_id and b.article_id = ? and a.client_id = ?";
	
	private static final String GET_DC_BASIC = "select b.id, b.code, a.type, case when (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0))> 0 then (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) else 0 end stock_level, " +
					" (case when ((a.type = 'virtual')) then DATEDIFF(a.expected_on,curdate()) else 0 end) delta, c.backorderable, c.expected_in from inventory_inventory a join fulfillment_dc b " +
					" on (a.dc_id = b.id) left join inventory_inventorybackorder c on  (a.rate_chart_id = c.rate_chart_id and a.dc_id = c.dc_id) where a.rate_chart_id = ? and b.client_id = ? and a.starts_on <= curdate() and curdate() <= a.ends_on and (case when ((a.type = 'virtual')) then a.expected_on >= curdate() else 1 end) and ((COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) > 0 or c.backorderable = 1)";


	private static final String GET_DC_COD = "select b.id, b.code, a.type, case when (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0))> 0 then (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) else 0 end stock_level, " +
					" (case when ((a.type = 'virtual')) then DATEDIFF(a.expected_on,curdate()) else 0 end) delta, c.backorderable, c.expected_in from inventory_inventory a join fulfillment_dc b " +
					" on (a.dc_id = b.id) left join inventory_inventorybackorder c on  (a.rate_chart_id = c.rate_chart_id and a.dc_id = c.dc_id) where a.rate_chart_id = ? and b.client_id = ? and a.starts_on <= curdate() and curdate() <= a.ends_on and (case when ((a.type = 'virtual')) then a.expected_on >= curdate() else 1 end) and ((COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) > 0 or c.backorderable = 1) and b.cod_flag = 1";


	private static final String GET_DC_LOCAL = "select b.id, b.code, a.type, case when (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0))> 0 then (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) else 0 end stock_level, " +
					" (case when ((a.type = 'virtual')) then DATEDIFF(a.expected_on,curdate()) else 0 end) delta, c.backorderable, c.expected_in from inventory_inventory a join fulfillment_dc b " +
					" on (a.dc_id = b.id) left join inventory_inventorybackorder c on  (a.rate_chart_id = c.rate_chart_id and a.dc_id = c.dc_id) where a.rate_chart_id = ? and b.client_id = ? and a.starts_on <= curdate() and curdate() <= a.ends_on and (case when ((a.type = 'virtual')) then a.expected_on >= curdate() else 1 end) and ((COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) > 0 or c.backorderable = 1) and b.id in (select dc_id from fulfillment_dczipgroup)";


	private static final String GET_DC_LOCAL_COD = "select b.id, b.code, a.type, case when (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0))> 0 then (COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) else 0 end stock_level, " +
					" (case when ((a.type = 'virtual')) then DATEDIFF(a.expected_on,curdate()) else 0 end) delta, c.backorderable, c.expected_in from inventory_inventory a join fulfillment_dc b " +
					" on (a.dc_id = b.id) left join inventory_inventorybackorder c on  (a.rate_chart_id = c.rate_chart_id and a.dc_id = c.dc_id) where a.rate_chart_id = ? and b.client_id = ? and a.starts_on <= curdate() and curdate() <= a.ends_on and (case when ((a.type = 'virtual')) then a.expected_on >= curdate() else 1 end) and ((COALESCE(a.stock, 0) - COALESCE(a.bookings, 0) - COALESCE(a.stock_adjustment, 0) - COALESCE(a.threshold, 0) - COALESCE(a.outward, 0)) > 0 or c.backorderable = 1) and b.cod_flag = 1 and b.id in (select dc_id from fulfillment_dczipgroup)";

	private static final String GET_LSPDC_BASIC = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, d.code dc_code, e.code lsp_code, b.zipgroup_code, c.transit_time from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_lspdeliverychart c, fulfillment_dc d, fulfillment_lsp e  " + 
												" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and a.supported_product_groups like ?" +
												" and c.dc_id in (?) and c.ship_mode = ? order by a.lsp_priority, c.transit_time asc;";
	
	private static final String GET_LSPDC_COD = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, d.code dc_code, e.code lsp_code, b.zipgroup_code, c.transit_time from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_lspdeliverychart c, fulfillment_dc d, fulfillment_lsp e  " + 
												" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and a.supported_product_groups like ?" +
												" and c.dc_id in (?) and c.ship_mode = ? and a.cod_flag = 1 order by a.lsp_priority, c.transit_time asc;";
	
	private static final String GET_LSPDC_LOCAL = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, b.zipgroup_code, d.code dc_code, e.code lsp_code from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_dczipgroup c, fulfillment_dc d, fulfillment_lsp e  " +
	  											" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and " +
	  											" a.supported_product_groups like ? and c.dc_id in (?)  order by a.lsp_priority asc"; 
	
	private static final String GET_LSPDC_LOCAL_COD = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, b.zipgroup_code, d.code dc_code, e.code lsp_code from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_dczipgroup c, fulfillment_dc d, fulfillment_lsp e  " +
												" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and " +
												" a.supported_product_groups like ? and c.dc_id in (?) and a.cod_flag = 1 order by a.lsp_priority asc";
	
	public ProductBo getProductGroup(String productId, String client) {
		s_logger.info("productId :: "+productId+" <<>> client :: "+client);
		List<ProductBo> productBoList = (List<ProductBo>)jdbcTemplate.query(GET_PRODUCTGROUP_QUERY, new Object[]{productId, client}, new ProductMapper());
		s_logger.info("productBoList :: "+productBoList);
		if(productBoList == null || productBoList.size() == 0)
		{
			return null;
		}
		s_logger.info(productBoList);
		return productBoList.get(0);
	}
	
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public List<DCBo> getDcList(ProductBo productBo, IFSBo ifsBo) {
		List<DCBo> dcBoList = null;
		String rateChartId = ifsBo.getRateChartId();
		String query = GET_DC_BASIC;
		Object[] params = new Object[2];
		params[0] = rateChartId;
		params[1] = ifsBo.getClient();
		System.out.println("isCod :: "+ifsBo.isCod());
		if(ifsBo.isCod() && productBo.isShipLocalOnly()){
			query = GET_DC_LOCAL_COD;
			dcBoList = jdbcTemplate.query(GET_DC_LOCAL_COD, params, new DCMapper());
		}
		else if(ifsBo.isCod())
		{
			query = GET_DC_COD;
			//query += " and b.cod_flag = 1";
			dcBoList = jdbcTemplate.query(GET_DC_COD, params, new DCMapper());
		}
		else if(productBo.isShipLocalOnly())
		{
			query = GET_DC_LOCAL;
			//query += " and b.id in (select dc_id from fulfillment_dczipgroup)";
			dcBoList = jdbcTemplate.query(GET_DC_LOCAL, params, new DCMapper());
		}
		else
		{
			query = GET_DC_BASIC;
			dcBoList = jdbcTemplate.query(GET_DC_BASIC, params, new DCMapper());
		}
		//query += " order by stock_level desc";
		System.out.println("dc query :: " + query);
		//List<DCBo> dcBoList = jdbcTemplate.query(query, params, new DCMapper());
		return dcBoList;
	}

	private String getDCArray(List<DCBo> dcBoList) {
		String retStr = ""; 
		for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
			DCBo dcBo = (DCBo) iterator.next();
			retStr += dcBo.getId()+",";
		}
		if(!StringUtils.isEmpty(retStr))
		{
			retStr = retStr.substring(0,retStr.lastIndexOf(","));
		}
		return retStr;
	}

	@Override
	public List<LspDcBo> getLSPDCList(List<DCBo> dcBoList, ProductBo productBo, IFSBo ifsBo) {
		System.out.println("IFSDaoJdbcImpl.getLSPDCList()\n\n");
		s_logger.info("IFSDaoJdbcImpl.getLSPDCList()");
		String query = GET_LSPDC_BASIC;
		String dcArray = getDCArray(dcBoList);
		s_logger.info("dcArray :: " + dcArray);
		List<LspDcBo> lspDcBoList = null;
		Object[] params = null;
		if(ifsBo.isCod() && productBo.isShipLocalOnly())
		{
			s_logger.info("cod shipLocalOnly.....");
			params = new Object[3];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			query = GET_LSPDC_LOCAL_COD;
			System.out.println("lsp-dc query :: "+query);
			lspDcBoList = jdbcTemplate.query(GET_LSPDC_LOCAL_COD, new Object[]{}, new LspDcMapper());
		}
		else if(ifsBo.isCod())
		{
			s_logger.info("cod .....");
			params = new Object[4];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			params[3] = productBo.getShippingMode();
			query = GET_LSPDC_COD;
			System.out.println("lsp-dc query :: "+query);
			//query += " and b.cod_flag = 1";
			lspDcBoList = jdbcTemplate.query(GET_LSPDC_COD, params, new LspDcMapper());
		}
		else if(productBo.isShipLocalOnly())
		{
			s_logger.info("shipLocalOnly.....");
			params = new Object[3];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			query = GET_LSPDC_LOCAL;
			System.out.println("lsp-dc query :: "+query);
			//query += " and b.id in (select dc_id from fulfillment_dczipgroup)";
			lspDcBoList = jdbcTemplate.query(GET_LSPDC_LOCAL, params, new LspDcMapper());
		}
		else
		{
			s_logger.info("non-cod non-shipLocalOnly.....");
			params = new Object[4];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			params[3] = productBo.getShippingMode();
			query = GET_LSPDC_BASIC;
			System.out.println("lsp-dc query :: "+query);
			lspDcBoList = jdbcTemplate.query(GET_LSPDC_BASIC, params, new LspDcMapper());
		}
	
		//System.out.println("query :: "+query);
		//lspDcBoList = jdbcTemplate.query(query, new Object[]{}, new LspDcMapper());
		
		if(lspDcBoList == null || lspDcBoList.size() == 0)
		{
			s_logger.info("no entry found in delivery chart...");
			return null;
		}
		s_logger.info("rows found :: "+lspDcBoList.size());
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			s_logger.info("lsp :: "+lspDcBo.getLspId()+" -- dcId :: "+lspDcBo.getDcId());
		}
		return lspDcBoList;
	}

}
