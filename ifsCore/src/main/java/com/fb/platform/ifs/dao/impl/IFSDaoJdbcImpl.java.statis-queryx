/**
 * 
 */
package com.fb.ifs.core.dao;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import com.fb.ifs.core.domain.DCBo;
import com.fb.ifs.core.domain.IFSBo;
import com.fb.ifs.core.domain.LspDcBo;
import com.fb.ifs.core.domain.LspZipgroupBo;
import com.fb.ifs.core.domain.ProductBo;

/**
 * @author sarvesh
 *
 */
public class IFSDaoJdbcImpl implements IFSDao {

	private JdbcTemplate jdbcTemplate;

	private static final String GET_PRODUCTGROUP_QUERY = "SELECT a.name, a.local_tag, a.ship_mode, a.high_value_flag, a.threshold_amount, b.article_id" +
														 " FROM fulfillment_productgroup a, fulfillment_articleproductgroup b" + 
														 " where a.id = b.product_group_id and b.article_id = ? and a.client_id = ?";
	
	private static final String GET_LSP_ZIPGROUP_QUERY = "select a.zipgroup_id, b.lsp_id, a.cod_flag, a.high_value from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b" + 
														 " where a.zipgroup_id = b.id and a.pincode = ? and a.supported_product_groups like ? "; 
	
	private static final String GET_DC_BASIC = "select (COALESCE(a.stock , 0) - COALESCE(a.threshold_stock,0)) physical_stock, (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) stock_level," +
											   " (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then DATEDIFF(a.expires_on,curdate()) else 0 end) delta," + 
											   " b.id, b.code from inventory_inventory a, fulfillment_dc b" +
											   " where a.dc_id = b.id and a.rate_chart_id = ? and b.client_id = ? and (case" + 
											   " when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) > 0 order by stock_level desc";
	
	private static final String GET_DC_COD = "select (COALESCE(a.stock , 0) - COALESCE(a.threshold_stock,0)) physical_stock, (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) stock_level," +
											   " (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then DATEDIFF(a.expires_on,curdate()) else 0 end) delta," + 
											   " b.id, b.code from inventory_inventory a, fulfillment_dc b" +
											   " where a.dc_id = b.id and a.rate_chart_id = ? and b.client_id = ? and (case" + 
											   " when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) > 0 and b.cod_flag = 1 order by stock_level desc";
	
	private static final String GET_DC_LOCAL = "select (COALESCE(a.stock , 0) - COALESCE(a.threshold_stock,0)) physical_stock, (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) stock_level," +
											   " (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then DATEDIFF(a.expires_on,curdate()) else 0 end) delta," + 
											   " b.id, b.code from inventory_inventory a, fulfillment_dc b" +
											   " where a.dc_id = b.id and a.rate_chart_id = ? and b.client_id = ? and (case" + 
											   " when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) > 0 and b.id in (select dc_id from fulfillment_dczipgroup) order by stock_level desc";
	
	private static final String GET_DC_LOCAL_COD = "select (COALESCE(a.stock , 0) - COALESCE(a.threshold_stock,0)) physical_stock, (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) stock_level," +
											   " (case when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then DATEDIFF(a.expires_on,curdate()) else 0 end) delta," + 
											   " b.id, b.code from inventory_inventory a, fulfillment_dc b" +
											   " where a.dc_id = b.id and a.rate_chart_id = ? and b.client_id = ? and (case" + 
											   " when ((curdate() <= a.expires_on) and ((COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) < ?)) then (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0) + COALESCE(a.virtual_stock, 0) - COALESCE(a.overbooked, 0))" +
											   " else (COALESCE(a.stock, 0) - COALESCE(a.threshold_stock, 0)) end) > 0 and b.cod_flag = 1 and b.id in (select dc_id from fulfillment_dczipgroup) order by stock_level desc";
	
	private static final String GET_LSPDC_BASIC = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, d.code dc_code, e.code lsp_code, b.zipgroup_code, c.transit_time from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_lspdeliverychart c, fulfillment_dc d, fulfillment_lsp e  " + 
												" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and a.supported_product_groups like ?" +
												" and c.dc_id in (?) and c.ship_mode = ? order by a.lsp_priority, c.transit_time asc;";
	
	private static final String GET_LSPDC_COD = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, d.code dc_code, e.code lsp_code, b.zipgroup_code, c.transit_time from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_lspdeliverychart c, fulfillment_dc d, fulfillment_lsp e  " + 
												" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and a.supported_product_groups like ?" +
												" and c.dc_id in (?) and c.ship_mode = ? and a.cod_flag = 1 order by a.lsp_priority, c.transit_time asc;";
	
	private static final String GET_LSPDC_LOCAL = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, b.zipgroup_code, d.code dc_code, e.code lsp_code from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_dczipgroup c, fulfillment_dc d, fulfillment_lsp e  " +
	  											" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and " +
	  											" a.supported_product_groups like ? and c.dc_id in (?)  order by a.lsp_priority asc"; 
	
	private static final String GET_LSPDC_LOCAL_COD = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, b.zipgroup_code, d.code dc_code, e.code lsp_code from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_dczipgroup c, fulfillment_dc d, fulfillment_lsp e  " +
												" where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = ? and " +
												" a.supported_product_groups like ? and c.dc_id in (?) and a.cod_flag = 1 order by a.lsp_priority asc";
	
	public ProductBo getProductGroup(String productId, String client) {
		List<ProductBo> productBoList = (List<ProductBo>)jdbcTemplate.query(GET_PRODUCTGROUP_QUERY, new Object[]{productId, client}, new ProductMapper());
		System.out.println("productBoList :: "+productBoList);
		if(productBoList == null || productBoList.size() == 0)
		{
			return null;
		}
		System.out.println(productBoList);
		return productBoList.get(0);
	}
	
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	

	@Override
	public List<LspZipgroupBo> getLspZipgroup(ProductBo productBo) {
		
		String query = GET_LSP_ZIPGROUP_QUERY;
		boolean isCod = true;
		Object[] params = new Object[2];
		params[0] = "400060";
		params[1] = "%"+productBo.getProductGroup()+",%";
		if(productBo.isHighValueFlag() && productBo.getThresholdAmt() > 1000)
		{
			query += " and a.high_value = 1"; 
		}
		if(isCod)
		{
			query += " and a.cod_flag = 1";
		}
		if(productBo.isShipLocalOnly())
		{
			query += " and a.zipgroup_id in (select zipgroup_id from fulfillment_dczipgroup)";
		}
		query += " order by a.lsp_priority asc"; 
		System.out.println("query :: "+query);
		List<LspZipgroupBo> lspZipgroupBoList = (List<LspZipgroupBo>)jdbcTemplate.query(query, params, new LspZipgroupMapper());
		System.out.println("lspZipgroupBoList :: "+lspZipgroupBoList.size());
		if(lspZipgroupBoList == null || lspZipgroupBoList.size() == 0)
		{
			return null;
		}
		System.out.println("lsp :: "+lspZipgroupBoList.get(0).getLsp());
		return lspZipgroupBoList;
	}

	public List<DCBo> getDcList(ProductBo productBo, IFSBo ifsBo) {
		List<DCBo> dcBoList = null;
		String rateChartId = ifsBo.getRateChartId();
		String query = GET_DC_BASIC;
		Object[] params = new Object[5];
		params[0] = ifsBo.getQty();
		params[1] = ifsBo.getQty();
		params[2] = rateChartId;
		params[3] = ifsBo.getClient();
		params[4] = ifsBo.getQty();
		System.out.println("isCod :: "+ifsBo.isCod());
		if(ifsBo.isCod() && productBo.isShipLocalOnly()){
			query = GET_DC_LOCAL_COD;
			dcBoList = jdbcTemplate.query(GET_DC_LOCAL_COD, params, new DCMapper());
		}
		else if(ifsBo.isCod())
		{
			query = GET_DC_COD;
			//query += " and b.cod_flag = 1";
			dcBoList = jdbcTemplate.query(GET_DC_COD, params, new DCMapper());
		}
		else if(productBo.isShipLocalOnly())
		{
			query = GET_DC_LOCAL;
			//query += " and b.id in (select dc_id from fulfillment_dczipgroup)";
			dcBoList = jdbcTemplate.query(GET_DC_LOCAL, params, new DCMapper());
		}
		else
		{
			query = GET_DC_BASIC;
			dcBoList = jdbcTemplate.query(GET_DC_BASIC, params, new DCMapper());
		}
		//query += " order by stock_level desc";
		System.out.println("dc query :: " + query);
		//List<DCBo> dcBoList = jdbcTemplate.query(query, params, new DCMapper());
		return dcBoList;
	}

	private String getDCArray(List<DCBo> dcBoList) {
		String retStr = ""; 
		for (Iterator<DCBo> iterator = dcBoList.iterator(); iterator.hasNext(); ) {
			DCBo dcBo = (DCBo) iterator.next();
			//retStr += dcBo.getDcId()+",";
			retStr += dcBo.getId()+",";
		}
		if(!StringUtils.isEmpty(retStr))
		{
			retStr = retStr.substring(0,retStr.lastIndexOf(","));
		}
		return retStr;
	}

	@Override
	public List<LspDcBo> getLSPDCList(List<DCBo> dcBoList, ProductBo productBo, IFSBo ifsBo) {
		System.out.println("IFSDaoJdbcImpl.getLSPDCList()");
		String query = GET_LSPDC_BASIC;
		String dcArray = getDCArray(dcBoList);
		System.out.println("dcArray :: " + dcArray);
		List<LspDcBo> lspDcBoList = null;
		Object[] params = null;
		if(ifsBo.isCod() && productBo.isShipLocalOnly())
		{
			params = new Object[3];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			query = GET_LSPDC_LOCAL_COD;
			lspDcBoList = jdbcTemplate.query(GET_LSPDC_LOCAL_COD, new Object[]{}, new LspDcMapper());
		}
		else if(ifsBo.isCod())
		{
			params = new Object[4];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			params[3] = productBo.getShippingMode();
			query = GET_LSPDC_COD;
			//query += " and b.cod_flag = 1";
			dcBoList = jdbcTemplate.query(GET_LSPDC_COD, params, new DCMapper());
		}
		else if(productBo.isShipLocalOnly())
		{
			params = new Object[3];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			query = GET_LSPDC_LOCAL;
			//query += " and b.id in (select dc_id from fulfillment_dczipgroup)";
			dcBoList = jdbcTemplate.query(GET_LSPDC_LOCAL, params, new DCMapper());
		}
		else
		{
			params = new Object[4];
			params[0] = ifsBo.getPincode();
			params[1] = "%"+productBo.getProductGroup()+",%";
			params[2] = dcArray;
			params[3] = productBo.getShippingMode();
			query = GET_LSPDC_BASIC;
			dcBoList = jdbcTemplate.query(GET_LSPDC_BASIC, params, new DCMapper());
		}
		/*if(productBo.isShipLocalOnly())
		{
			query = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, b.zipgroup_code, d.code dc_code, e.code lsp_code from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_dczipgroup c, fulfillment_dc d, fulfillment_lsp e  " +
			  " where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = "+ifsBo.getPincode()+" and " +
			  "	a.supported_product_groups like '%"+productBo.getProductGroup()+",%' and c.dc_id in ("+dcArray+") ";
			  
			  if(ifsBo.isCod())
			  {
				  query += " and a.cod_flag = 1"; 
			  }
			  query += " order by a.lsp_priority asc";
		}
		else
		{
			query = "select c.dc_id, b.lsp_id, a.zipgroup_id, a.lsp_priority, d.code dc_code, e.code lsp_code, b.zipgroup_code, c.transit_time from fulfillment_pincodezipgroupmap a, fulfillment_lspzipgroup b, fulfillment_lspdeliverychart c, fulfillment_dc d, fulfillment_lsp e  " + 
			 " where a.zipgroup_id = b.id and a.zipgroup_id = c.zipgroup_id and c.dc_id = d.id and b.lsp_id = e.id and a.pincode = "+ifsBo.getPincode()+" and a.supported_product_groups like '%"+productBo.getProductGroup()+",%'" +
			 " and c.dc_id in ("+dcArray+") and c.ship_mode = '"+productBo.getShippingMode()+"'";
			
			if(ifsBo.isCod())
			{
				query += " and a.cod_flag = 1"; 
			}
			query += " order by a.lsp_priority, c.transit_time asc;";
		}*/
		System.out.println("query :: "+query);
		lspDcBoList = jdbcTemplate.query(query, new Object[]{}, new LspDcMapper());
		
		if(lspDcBoList == null || lspDcBoList.size() == 0)
		{
			System.out.println("no entry found in delivery chart...");
			return null;
		}
		System.out.println("rows found :: "+lspDcBoList.size());
		for (Iterator<LspDcBo> iterator = lspDcBoList.iterator(); iterator.hasNext(); ) {
			LspDcBo lspDcBo = (LspDcBo) iterator.next();
			System.out.println("lsp :: "+lspDcBo.getLspId()+" -- dcId :: "+lspDcBo.getDcId());
		}
		return lspDcBoList;
	}

}
